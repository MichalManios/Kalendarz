#pragma checksum "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\Pages\Day.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e3cb25d11bd919e850406087dec3d56d8c52556d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Kalendarz_Telekonferencji.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Kalendarz_Telekonferencji;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using Kalendarz_Telekonferencji.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\Pages\Day.razor"
using Kalendarz_Telekonferencji.Data.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\Pages\Day.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\Pages\Day.razor"
using Kalendarz_Telekonferencji.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\Pages\Day.razor"
using Kalendarz_Telekonferencji.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/day/{selectedDate}")]
    public partial class Day : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 305 "C:\PROJEKTY\KALENDARZ\Kalendarz Telekonferencji ZZ GOTOWY PROJEKT\Kalendarz Telekonferencji\Pages\Day.razor"
 
    [Parameter]
    public string selectedDate { get; set; }

    string sMessage = "";
    Date date;

    List<CalendarViewModel> calendarList = new List<CalendarViewModel>();
    CalendarViewModel calendar = new CalendarViewModel();
    int iIdOfCalendarEvent = -1;

    DateTime StartTime { get; set; }
    DateTime EndTime { get; set; }
    string TypeOfConference { get; set; } = "";
    string WhoIsConcern { get; set; } = "";
    string OtherInformation { get; set; }

    string MessageStartTime { get; set; } = "";
    string MessageEndTime { get; set; } = "";
    string MessageCorectTime { get; set; } = "";
    string MessageWhoIsConcern { get; set; } = "";
    string MessageTypeOfConference { get; set; } = "";
    bool StartChecking { get; set; } = false;

    bool bEditCalendar { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        date = new Date(DateTime.Parse(selectedDate));
        calendarList = await calendarServices.GetCalendarsByDayAsync(DateTime.Parse(selectedDate));//GetAllCalendars().OrderBy(x => x.Year).ThenBy(x => x.Month).ThenBy(x => x.Day).ThenBy(x => x.TimeStart).ToList();
    }

    void GoMonth()
    {
        navigationManager.NavigateTo("/", true);
    }

    void GoWeek()
    {
        DateTime selectedDate = new DateTime(Convert.ToInt32(date.Year), date.Month, Convert.ToInt32(date.Day), 0, 0, 0);
        navigationManager.NavigateTo($"/week/{selectedDate.Date.ToShortDateString()}");
    }

    void GoDay()
    {
        navigationManager.NavigateTo("/day", true);
    }

    async Task UploadAsync()
    {
        fileUpload.IsAnyFileWaitToUpload();
        if (await fileUpload.UploadFileAsync()) sMessage = "Plik na serwerze.";
        else sMessage = "Coś poszło nie tak.";
    }

    void ConferenceTypeSelection(ChangeEventArgs args)
    {
        TypeOfConference = args.Value.ToString();
    }

    async Task PreviousDayAsync()
    {
        selectedDate = date.GoToPreviousDay().ToShortDateString();
        navigationManager.NavigateTo($"/day/{selectedDate}");
        await OnInitializedAsync();
    }

    async Task NextDayAsync()
    {
        selectedDate = date.GoToNextDay().ToShortDateString();
        navigationManager.NavigateTo($"/day/{selectedDate}");
        await OnInitializedAsync();
    }

    async Task SaveConferenceAsync()
    {
        StartChecking = true;
        if (CheckThatAllFieldIsNotEmpty())
        {
            StartChecking = false;

            string startHour = StartTime.Hour.ToString();
            string startMinutes = StartTime.Minute.ToString();
            string endHour = EndTime.Hour.ToString();
            string endMinutes = EndTime.Minute.ToString();
            string finalStartHour = "";
            string finalStartMinutes = "";
            string finalEndHour = "";
            string finalEndMinutes = "";
            if (startHour.Length == 1) finalStartHour = "0" + startHour;
            else finalStartHour = startHour;
            if (startMinutes.Length == 1) finalStartMinutes = "0" + startMinutes;
            else finalStartMinutes = startMinutes;
            if (endHour.Length == 1) finalEndHour = "0" + endHour;
            else finalEndHour = endHour;
            if (endMinutes.Length == 1) finalEndMinutes = "0" + endMinutes;
            else finalEndMinutes = endMinutes;

            calendar.Day = date.Day;
            calendar.Month = date.Month;
            calendar.Year = date.Year;
            calendar.TimeStart = finalStartHour + ":" + finalStartMinutes;
            calendar.TimeEnd = finalEndHour + ":" + finalEndMinutes;
            calendar.TypeOfConference = TypeOfConference;
            calendar.WhoIsConcern = WhoIsConcern;
            calendar.OtherInformation = OtherInformation;
            calendar.Url = fileUpload.GetURLToFile();
            await calendarServices.SaveCalendarAsync(calendar);

            StartTime = new DateTime(1, 1, 1, 00, 00, 00);
            EndTime = new DateTime(1, 1, 1, 00, 00, 00);
            TypeOfConference = "";
            WhoIsConcern = "";
            OtherInformation = "";

            sMessage = "";

            DateTime selectedDate = new DateTime(Convert.ToInt32(date.Year), date.Month, Convert.ToInt32(date.Day), 0, 0, 0);
            //navigationManager.NavigateTo($"/day/{selectedDate.Date.ToShortDateString()}");
            await OnInitializedAsync();
        }
    }

    //my own validation
    bool CheckThatAllFieldIsNotEmpty()
    {
        if (CheckStartTime() == true && CheckEndTime() == true && CheckWhoIsConcern() == true && CheckTypeOfConference()==true && CheckCorectTime()==true) return true;
        else return false;
    }

    bool CheckStartTime()
    {
        if (StartTime.Hour.ToString() == "0" && StartTime.Minute.ToString() == "0")
        {
            MessageStartTime = "Nie wybrano godziny rozpoczęcia.";
            return false;
        }
        else  return true;
    }

    bool CheckEndTime()
    {
        if (EndTime.Hour.ToString() == "0" && EndTime.Minute.ToString() == "0")
        {
            MessageEndTime = "Nie wybrano godziny zakończenia.";
            return false;
        }
        else return true;
    }

    bool CheckCorectTime()
    {
        if (EndTime <= StartTime)
        {
            MessageCorectTime = "Godzina zakończenia nie może być wcześniejsza od godziny rozpoczęcia.";
            return false;
        }
        else return true;
    }

    bool CheckWhoIsConcern()
    {
        if (WhoIsConcern == "")
        {
            MessageWhoIsConcern = "Nie wypełniono pola kogo dotyczy.";
            return false;
        }
        else return true;
    }

    bool CheckTypeOfConference()
    {
        if (TypeOfConference == "")
        {
            MessageTypeOfConference = "Nie wybrano rodzaju wideokonferencji.";
            return false;
        }
        else return true;
    }
    //end validation

    async Task EditConferenceAsync(int IdConference)
    {
        iIdOfCalendarEvent = IdConference;
        calendar = await calendarServices.GetCalendarByIdAsync(IdConference);


        StartTime = new DateTime(Convert.ToInt32(date.Year), date.Month, Convert.ToInt32(date.Day), Convert.ToInt32(calendar.TimeStart.Substring(0, 2)), Convert.ToInt32(calendar.TimeStart.Substring(3, 2)), 0);
        EndTime = new DateTime(Convert.ToInt32(date.Year), date.Month, Convert.ToInt32(date.Day), Convert.ToInt32(calendar.TimeEnd.Substring(0, 2)), Convert.ToInt32(calendar.TimeEnd.Substring(3, 2)), 0);
        TypeOfConference = calendar.TypeOfConference;
        WhoIsConcern = calendar.WhoIsConcern;
        OtherInformation = calendar.OtherInformation;
        bEditCalendar = true;
    }

    async Task SaveEditedCalendarAsync()
    {
        StartChecking = true;
        if (CheckThatAllFieldIsNotEmpty())
        {
            bEditCalendar = false;
            StartChecking = false;

            string startHour = StartTime.Hour.ToString();
            string startMinutes = StartTime.Minute.ToString();
            string endHour = EndTime.Hour.ToString();
            string endMinutes = EndTime.Minute.ToString();
            string finalStartHour = "";
            string finalStartMinutes = "";
            string finalEndHour = "";
            string finalEndMinutes = "";
            if (startHour.Length == 1) finalStartHour = "0" + startHour;
            else finalStartHour = startHour;
            if (startMinutes.Length == 1) finalStartMinutes = "0" + startMinutes;
            else finalStartMinutes = startMinutes;
            if (endHour.Length == 1) finalEndHour = "0" + endHour;
            else finalEndHour = endHour;
            if (endMinutes.Length == 1) finalEndMinutes = "0" + endMinutes;
            else finalEndMinutes = endMinutes;

            calendar.Day = date.Day;
            calendar.Month = date.Month;
            calendar.Year = date.Year;
            calendar.TimeStart = finalStartHour + ":" + finalStartMinutes;
            calendar.TimeEnd = finalEndHour + ":" + finalEndMinutes;
            calendar.TypeOfConference = TypeOfConference;
            calendar.WhoIsConcern = WhoIsConcern;
            calendar.OtherInformation = OtherInformation;
            calendar.Url = fileUpload.GetURLToFile();
            await calendarServices.SaveEditedCalendarAsync(iIdOfCalendarEvent, calendar);

            StartTime = new DateTime(1, 1, 1, 00, 00, 00);
            EndTime = new DateTime(1, 1, 1, 00, 00, 00);
            TypeOfConference = "";
            WhoIsConcern = "";
            OtherInformation = "";

            DateTime selectedDate = new DateTime(Convert.ToInt32(date.Year), date.Month, Convert.ToInt32(date.Day), 0, 0, 0);
            //navigationManager.NavigateTo($"/day/{selectedDate.Date.ToShortDateString()}");
            await OnInitializedAsync();
        }
    }

    void CancelEditingCalendar()
    {
        calendar = null;
        StartTime = new DateTime(1, 1, 1, 00, 00, 00);
        EndTime = new DateTime(1, 1, 1, 00, 00, 00);
        TypeOfConference = "";
        WhoIsConcern = "";
        OtherInformation = "";
        iIdOfCalendarEvent = -1;
        bEditCalendar = false;

        sMessage = "";
    }

    async Task DeleteConferenceAsync(int IdConference)
    {
        iIdOfCalendarEvent = IdConference;
        await calendarServices.DeleteCalendarAsync(IdConference);
        DateTime selectedDate = new DateTime(Convert.ToInt32(date.Year), date.Month, Convert.ToInt32(date.Day), 0, 0, 0);
        //navigationManager.NavigateTo($"/day/{selectedDate.Date.ToShortDateString()}");
        await OnInitializedAsync();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICalendarServices calendarServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileUpload fileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
    }
}
#pragma warning restore 1591
