@page "/week/{selectedDate}"


@using Kalendarz_Telekonferencji.Models
@using Kalendarz_Telekonferencji.Data
@using Kalendarz_Telekonferencji.Data.Interfaces

@inject NavigationManager navigationManager
@inject ICalendarServices calendarServices


<div class="row calendar col-12">


    <div class="sticky">

        <div class="col-12"><br /></div>

        <div class="col-12 head">
            <div id="month" class="col-3">
                <label id="WeekDate">@date.GetMonthToPolishWord() @date.GetYearForWeekView() r.</label>
            </div>
            <div id="btn" class="col-5">
                <button class="btn" @onclick="GoDay">Dzień</button>
                <button class="btn clicked" @onclick="GoWeek" disabled>Tydzień</button>
                <button class="btn" @onclick="GoMonth">Miesiąc</button>
            </div>
            <div id="nextBack" class="col-3">
                <button class="btn" @onclick="GoPreviousWeekAsync">Do tyłu</button>
                <button class="btn" @onclick="GoNextWeekAsync">Do przodu</button>
            </div>
        </div>

        <div class="col-12 inlineBlock fontDay">
            <label class="fontDay">Wybrany dzień:</label>
            <input id="string" class="fontDay" type="text" disabled readonly @bind="@sDayFromCalendarClick" @oninput="@((e) => { sDayFromCalendarClick=(string)e.Value;})" />
        </div>

        <div class="col-12"><br /></div>

        <div class="col-12 calendarHead">
            <div id="one" class="day">
                PONIEDZIAŁEK
            </div>
            <div id="two" class="day">
                WTOREK
            </div>
            <div id="three" class="day">
                ŚRODA
            </div>
            <div id="four" class="day">
                CZWARTEK
            </div>
            <div id="five" class="day">
                PIĄTEK
            </div>
            <div id="six" class="day">
                SOBOTA
            </div>
            <div id="seven" class="day">
                NIEDZIELA
            </div>
        </div>
    </div>


    <div class="calendarBackground col-12">
        @for (int i = 0; i < 7; i++)
        {
            var index = i;

            <div class="@(days[index].ToString()==sDayFromCalendarClick ? @classField[index]="calendarFieldActive2 calendarField2" : @classField[index]="calendarField2")" 
                 @onclick="(() => SelectField(index))" @ondblclick="GoDay">

                <div class="col-12 centerDay">
                    <div class="col-12"><br /></div>

                    <div class="col-xl-6 col-lg-10 col-12 days inlineBlock">
                        @days[index]
                    </div>
                    <div class="col-12"><br /></div>
                </div>
                @foreach (var item in calendarList)
                {
                    if (days[i].ToString() == item.Day && date.Month == item.Month && date.Year == item.Year)
                    {
                        if (item.TypeOfConference == "SW")
                        {
                            <div class="col-12 centerDay colorSW" @onclick="@(()=>ShowEventAsync(item.Id))">
                                @item.TimeStart - @item.TimeEnd @item.TypeOfConference <br />
                                @item.WhoIsConcern <br />
                                @item.OtherInformation
                            </div>
                        }
                        if (item.TypeOfConference == "Sąd")
                        {
                            <div class="col-12 centerDay colorSad" @onclick="@(()=>ShowEventAsync(item.Id))">
                               @item.TimeStart - @item.TimeEnd @item.TypeOfConference <br />
                                @item.WhoIsConcern <br />
                                @item.OtherInformation
                            </div>
                        }
                        if (item.TypeOfConference == "Inna")
                        {
                            <div class="col-12 centerDay colorOther" @onclick="@(()=>ShowEventAsync(item.Id))">
                                @item.TimeStart - @item.TimeEnd @item.TypeOfConference <br />
                                @item.WhoIsConcern <br />
                                @item.OtherInformation
                            </div>
                        }
                    }
                }
            </div>

        }

    </div>

</div>






@if (bShowEvent)
{
    <!-- This is the popup to create or edit -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modalBackgroundColor">
                    <h3 class="modal-title fontDayHeader colorFont centerDay">
                        Wydarzenie: @calendar.Day @SetMonthToPolishWord(calendar.Month) @calendar.Year r.<br />
                        @GetDayOfWeekInPolish(new DateTime(Convert.ToInt32(calendar.Year), calendar.Month, Convert.ToInt32(calendar.Day), 1, 1, 1).Date.DayOfWeek.ToString())
                    </h3>

                </div>
                <!-- Edit form to show -->
                <div class="modal-body">
                    <div class="col-12">
                        <div class="col-12 inlineBlock fontDay">
                            <label class="fontDay">Planowana godzina rozpoczęcia:</label>
                            <input class="fontDay centerDay" type="text" disabled readonly @bind-value="calendar.TimeStart" />
                        </div>
                        <div class="col-12 inlineBlock fontDay">
                            <label class="fontDay">Planowana godzina zakończenia:</label>
                            <input class="fontDay centerDay" type="text" disabled readonly @bind-value="calendar.TimeEnd" />
                        </div>
                        <div class="col-12 inlineBlock fontDay">
                            <label>Rodzaj wideokonferencji:</label>
                            <input class="fontDay centerDay" type="text" disabled readonly @bind-value="calendar.TypeOfConference" />
                        </div>
                        <div class="col-12 inlineBlock fontDay">
                            <label class="col-12 leftSide">Kogo dotyczy:</label>
                            <input class="col-12 fontDay centerDay" type="text" disabled readonly @bind-value="calendar.WhoIsConcern" />
                        </div>
                        <div class="col-12 leftSide fontDay">
                            <label>Dodatkowe informacje:</label>
                        </div>

                        <div class="col-12 fontDay">
                            <textarea class="col-12 textDay borderDay fontDay" readonly disabled>@calendar.OtherInformation</textarea>
                        </div>

                        @if (calendar.Url != "")
                        {
                            <div class="col-12"><br /></div>
                            <div class="col-12">
                                <a class="fontDayLink centerDay" href="@calendar.Url" target="_blank">Zeskanowany dokument</a>
                            </div>
                        }
                    </div>

                    <br />
                    <!-- Button to back -->
                    <button class="btn2 btn-primary" @onclick="CloseEvent">
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>
}








@code
{
    [Parameter]
    public string selectedDate { get; set; }

    string sDayFromCalendarClick { set; get; } = "";

    List<CalendarViewModel> calendarList = new List<CalendarViewModel>();
    CalendarViewModel calendar = new CalendarViewModel();
    int iIdOfCalendarEvent = -1;
    Date date;
    List<int> days = new List<int>();
    string[] classField = new string[7];
    int oldIndex = -1;

    void SetClassField()
    {
        for (int i = 0; i < 7; i++)
        {
            classField[i] = "calendarField2";
        }
    }

    void SelectField(int index)
    {

        if (classField[index] == "calendarField2")
        {
            classField[index] = "calendarFieldActive2 calendarField2";
        }
        else
        {
            classField[index] = "calendarField2";
        }

        if (oldIndex != -1)
        {
            classField[oldIndex] = "calendarField2";
        }
        oldIndex = index;
        sDayFromCalendarClick = days[index].ToString();
    }


    protected override async Task OnInitializedAsync()
    {
        SetClassField();
        date = new Date(DateTime.Parse(selectedDate));
        days = date.InitWeek();
        sDayFromCalendarClick = date.Day;
        calendarList = await calendarServices.GetCalendarsByMonthAsync(DateTime.Parse(selectedDate));//GetAllCalendarsAsync();//.OrderBy(x => x.Year).ThenBy(x => x.Month).ThenBy(x => x.Day).ThenBy(x => x.TimeStart).ToList();
    }

    void GoMonth()
    {
        navigationManager.NavigateTo("/", true);
    }

    void GoWeek()
    {
        navigationManager.NavigateTo("/week", true);
    }

    void GoDay()
    {
        DateTime selectedDate = new DateTime(Convert.ToInt32(date.Year), date.Month, Convert.ToInt32(sDayFromCalendarClick), 0, 0, 0);
        navigationManager.NavigateTo($"/day/{selectedDate.Date.ToShortDateString()}");
    }


    bool bShowEvent = false;
    async Task ShowEventAsync(int IdOfCalendarEvent)
    {
        iIdOfCalendarEvent = IdOfCalendarEvent;
        calendar = await calendarServices.GetCalendarByIdAsync(iIdOfCalendarEvent);
        bShowEvent = true;
    }

    void CloseEvent()
    {
        bShowEvent = false;
    }

    async Task GoPreviousWeekAsync()
    {
        days = date.InitWeek();
        selectedDate = date.GoToPreviousWeek(days).ToShortDateString();
        navigationManager.NavigateTo($"/week/{selectedDate}");
        await OnInitializedAsync();
    }

    async Task GoNextWeekAsync()
    {
        days = date.InitWeek();
        selectedDate = date.GoToNextWeek(days).ToShortDateString();
        navigationManager.NavigateTo($"/week/{selectedDate}");
        await OnInitializedAsync();
    }

    string GetDayOfWeekInPolish(string DayOfWeek)
    {
        string DayOfWeekPolish = "";
        switch (DayOfWeek)
        {
            case "Monday":
                DayOfWeekPolish = "Poniedziałek";
                break;
            case "Tuesday":
                DayOfWeekPolish = "Wtorek";
                break;
            case "Wednesday":
                DayOfWeekPolish = "Środa";
                break;
            case "Thursday":
                DayOfWeekPolish = "Czwartek";
                break;
            case "Friday":
                DayOfWeekPolish = "Piątek";
                break;
            case "Saturday":
                DayOfWeekPolish = "Sobota";
                break;
            case "Sunday":
                DayOfWeekPolish = "Niedziela";
                break;
        }
        return DayOfWeekPolish;
    }

    string SetMonthToPolishWord(int month)
    {
        string Month = "";
        switch (month)
        {
            case 1:
                Month = "STYCZEŃ";
                break;
            case 2:
                Month = "LUTY";
                break;
            case 3:
                Month = "MARZEC";
                break;
            case 4:
                Month = "KWIECIEŃ";
                break;
            case 5:
                Month = "MAJ";
                break;
            case 6:
                Month = "CZERWIEC";
                break;
            case 7:
                Month = "LIPIEC";
                break;
            case 8:
                Month = "SIERPIEŃ";
                break;
            case 9:
                Month = "WRZESIEŃ";
                break;
            case 10:
                Month = "PAŹDZIERNIK";
                break;
            case 11:
                Month = "LISTOPAD";
                break;
            case 12:
                Month = "GRUDZIEŃ";
                break;
        }
        return Month;
    }
}